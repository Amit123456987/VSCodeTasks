$ mkdir -p ./{recipe-api,shared}/tls$ openssl req -nodes -new -x509 \-keyout recipe-api/tls/basic-private-key.key \-out shared/tls/basic-certificate.certThis command creates two files, namely basic-private-key.key (the private key) and basic-certificate.cert (the public key).Next, copy the recipe-api/producer-http-basic.js service that you made in Example 1-6 to a new file named recipe-api/producer-https-basic.js to resemble Example 2-7. This is an HTTPS server built entirely with Node.js.Example 2-7. recipe-api/producer-https-basic.js#!/usr/bin/env node// npm install fastify@3.2// Warning: Not as efficient as using a Reverse Proxy const fs = require('fs');const server = require('fastify')({ https: { key: fs.readFileSync(  dirname+'/tls/basic-private-key.key'),cert: fs.readFileSync(  dirname+'/../shared/tls/basic-certificate.cert'),}});const HOST = process.env.HOST || '127.0.0.1'; const PORT = process.env.PORT || 4000;server.get('/recipes/:id', async (req, reply) => { const id = Number(req.params.id);if (id !== 42) { reply.statusCode = 404;return { error: 'not_found' };}return {producer_pid: process.pid,recipe: {id, name: "Chicken Tikka Masala", steps: "Throw it in a pot...", ingredients: [{ id: 1, name: "Chicken", quantity: "1 lb", },{ id: 2, name: "Sauce", quantity: "2 cups", }]}};});server.listen(PORT, HOST, () => {console.log(`Producer running at https://${HOST}:${PORT}`);});$ mkdir -p ./{recipe-api,shared}/tls$ openssl req -nodes -new -x509 \-keyout recipe-api/tls/basic-private-key.key \-out shared/tls/basic-certificate.certThis command creates two files, namely basic-private-key.key (the private key) and basic-certificate.cert (the public key).Next, copy the recipe-api/producer-http-basic.js service that you made in Example 1-6 to a new file named recipe-api/producer-https-basic.js to resemble Example 2-7. This is an HTTPS server built entirely with Node.js.Example 2-7. recipe-api/producer-https-basic.js#!/usr/bin/env node// npm install fastify@3.2// Warning: Not as efficient as using a Reverse Proxy const fs = require('fs');const server = require('fastify')({ https: { key: fs.readFileSync(  dirname+'/tls/basic-private-key.key'),cert: fs.readFileSync(  dirname+'/../shared/tls/basic-certificate.cert'),}});const HOST = process.env.HOST || '127.0.0.1'; const PORT = process.env.PORT || 4000;server.get('/recipes/:id', async (req, reply) => { const id = Number(req.params.id);if (id !== 42) { reply.statusCode = 404;return { error: 'not_found' };}return {producer_pid: process.pid,recipe: {id, name: "Chicken Tikka Masala", steps: "Throw it in a pot...", ingredients: [{ id: 1, name: "Chicken", quantity: "1 lb", },{ id: 2, name: "Sauce", quantity: "2 cups", }]}};});server.listen(PORT, HOST, () => {console.log(`Producer running at https://${HOST}:${PORT}`);});$ mkdir -p ./{recipe-api,shared}/tls$ openssl req -nodes -new -x509 \-keyout recipe-api/tls/basic-private-key.key \-out shared/tls/basic-certificate.certThis command creates two files, namely basic-private-key.key (the private key) and basic-certificate.cert (the public key).Next, copy the recipe-api/producer-http-basic.js service that you made in Example 1-6 to a new file named recipe-api/producer-https-basic.js to resemble Example 2-7. This is an HTTPS server built entirely with Node.js.Example 2-7. recipe-api/producer-https-basic.js#!/usr/bin/env node// npm install fastify@3.2// Warning: Not as efficient as using a Reverse Proxy const fs = require('fs');const server = require('fastify')({ https: { key: fs.readFileSync(  dirname+'/tls/basic-private-key.key'),cert: fs.readFileSync(  dirname+'/../shared/tls/basic-certificate.cert'),}});const HOST = process.env.HOST || '127.0.0.1'; const PORT = process.env.PORT || 4000;server.get('/recipes/:id', async (req, reply) => { const id = Number(req.params.id);if (id !== 42) { reply.statusCode = 404;return { error: 'not_found' };}return {producer_pid: process.pid,recipe: {id, name: "Chicken Tikka Masala", steps: "Throw it in a pot...", ingredients: [{ id: 1, name: "Chicken", quantity: "1 lb", },{ id: 2, name: "Sauce", quantity: "2 cups", }]}};});server.listen(PORT, HOST, () => {console.log(`Producer running at https://${HOST}:${PORT}`);});$ mkdir -p ./{recipe-api,shared}/tls$ openssl req -nodes -new -x509 \-keyout recipe-api/tls/basic-private-key.key \-out shared/tls/basic-certificate.certThis command creates two files, namely basic-private-key.key (the private key) and basic-certificate.cert (the public key).Next, copy the recipe-api/producer-http-basic.js service that you made in Example 1-6 to a new file named recipe-api/producer-https-basic.js to resemble Example 2-7. This is an HTTPS server built entirely with Node.js.Example 2-7. recipe-api/producer-https-basic.js#!/usr/bin/env node// npm install fastify@3.2// Warning: Not as efficient as using a Reverse Proxy const fs = require('fs');const server = require('fastify')({ https: { key: fs.readFileSync(  dirname+'/tls/basic-private-key.key'),cert: fs.readFileSync(  dirname+'/../shared/tls/basic-certificate.cert'),}});const HOST = process.env.HOST || '127.0.0.1'; const PORT = process.env.PORT || 4000;server.get('/recipes/:id', async (req, reply) => { const id = Number(req.params.id);if (id !== 42) { reply.statusCode = 404;return { error: 'not_found' };}return {producer_pid: process.pid,recipe: {id, name: "Chicken Tikka Masala", steps: "Throw it in a pot...", ingredients: [{ id: 1, name: "Chicken", quantity: "1 lb", },{ id: 2, name: "Sauce", quantity: "2 cups", }]}};});server.listen(PORT, HOST, () => {console.log(`Producer running at https://${HOST}:${PORT}`);});$ mkdir -p ./{recipe-api,shared}/tls$ openssl req -nodes -new -x509 \-keyout recipe-api/tls/basic-private-key.key \-out shared/tls/basic-certificate.certThis command creates two files, namely basic-private-key.key (the private key) and basic-certificate.cert (the public key).Next, copy the recipe-api/producer-http-basic.js service that you made in Example 1-6 to a new file named recipe-api/producer-https-basic.js to resemble Example 2-7. This is an HTTPS server built entirely with Node.js.Example 2-7. recipe-api/producer-https-basic.js#!/usr/bin/env node// npm install fastify@3.2// Warning: Not as efficient as using a Reverse Proxy const fs = require('fs');const server = require('fastify')({ https: { key: fs.readFileSync(  dirname+'/tls/basic-private-key.key'),cert: fs.readFileSync(  dirname+'/../shared/tls/basic-certificate.cert'),}});const HOST = process.env.HOST || '127.0.0.1'; const PORT = process.env.PORT || 4000;server.get('/recipes/:id', async (req, reply) => { const id = Number(req.params.id);if (id !== 42) { reply.statusCode = 404;return { error: 'not_found' };}return {producer_pid: process.pid,recipe: {id, name: "Chicken Tikka Masala", steps: "Throw it in a pot...", ingredients: [{ id: 1, name: "Chicken", quantity: "1 lb", },{ id: 2, name: "Sauce", quantity: "2 cups", }]}};});server.listen(PORT, HOST, () => {console.log(`Producer running at https://${HOST}:${PORT}`);});$ mkdir -p ./{recipe-api,shared}/tls$ openssl req -nodes -new -x509 \-keyout recipe-api/tls/basic-private-key.key \-out shared/tls/basic-certificate.certThis command creates two files, namely basic-private-key.key (the private key) and basic-certificate.cert (the public key).Next, copy the recipe-api/producer-http-basic.js service that you made in Example 1-6 to a new file named recipe-api/producer-https-basic.js to resemble Example 2-7. This is an HTTPS server built entirely with Node.js.Example 2-7. recipe-api/producer-https-basic.js#!/usr/bin/env node// npm install fastify@3.2// Warning: Not as efficient as using a Reverse Proxy const fs = require('fs');const server = require('fastify')({ https: { key: fs.readFileSync(  dirname+'/tls/basic-private-key.key'),cert: fs.readFileSync(  dirname+'/../shared/tls/basic-certificate.cert'),}});const HOST = process.env.HOST || '127.0.0.1'; const PORT = process.env.PORT || 4000;server.get('/recipes/:id', async (req, reply) => { const id = Number(req.params.id);if (id !== 42) { reply.statusCode = 404;return { error: 'not_found' };}return {producer_pid: process.pid,recipe: {id, name: "Chicken Tikka Masala", steps: "Throw it in a pot...", ingredients: [{ id: 1, name: "Chicken", quantity: "1 lb", },{ id: 2, name: "Sauce", quantity: "2 cups", }]}};});server.listen(PORT, HOST, () => {console.log(`Producer running at https://${HOST}:${PORT}`);});$ mkdir -p ./{recipe-api,shared}/tls$ openssl req -nodes -new -x509 \-keyout recipe-api/tls/basic-private-key.key \-out shared/tls/basic-certificate.certThis command creates two files, namely basic-private-key.key (the private key) and basic-certificate.cert (the public key).Next, copy the recipe-api/producer-http-basic.js service that you made in Example 1-6 to a new file named recipe-api/producer-https-basic.js to resemble Example 2-7. This is an HTTPS server built entirely with Node.js.Example 2-7. recipe-api/producer-https-basic.js#!/usr/bin/env node// npm install fastify@3.2// Warning: Not as efficient as using a Reverse Proxy const fs = require('fs');const server = require('fastify')({ https: { key: fs.readFileSync(  dirname+'/tls/basic-private-key.key'),cert: fs.readFileSync(  dirname+'/../shared/tls/basic-certificate.cert'),}});const HOST = process.env.HOST || '127.0.0.1'; const PORT = process.env.PORT || 4000;server.get('/recipes/:id', async (req, reply) => { const id = Number(req.params.id);if (id !== 42) { reply.statusCode = 404;return { error: 'not_found' };}return {producer_pid: process.pid,recipe: {id, name: "Chicken Tikka Masala", steps: "Throw it in a pot...", ingredients: [{ id: 1, name: "Chicken", quantity: "1 lb", },{ id: 2, name: "Sauce", quantity: "2 cups", }]}};});server.listen(PORT, HOST, () => {console.log(`Producer running at https://${HOST}:${PORT}`);});$ mkdir -p ./{recipe-api,shared}/tls$ openssl req -nodes -new -x509 \-keyout recipe-api/tls/basic-private-key.key \-out shared/tls/basic-certificate.certThis command creates two files, namely basic-private-key.key (the private key) and basic-certificate.cert (the public key).Next, copy the recipe-api/producer-http-basic.js service that you made in Example 1-6 to a new file named recipe-api/producer-https-basic.js to resemble Example 2-7. This is an HTTPS server built entirely with Node.js.Example 2-7. recipe-api/producer-https-basic.js#!/usr/bin/env node// npm install fastify@3.2// Warning: Not as efficient as using a Reverse Proxy const fs = require('fs');const server = require('fastify')({ https: { key: fs.readFileSync(  dirname+'/tls/basic-private-key.key'),cert: fs.readFileSync(  dirname+'/../shared/tls/basic-certificate.cert'),}});const HOST = process.env.HOST || '127.0.0.1'; const PORT = process.env.PORT || 4000;server.get('/recipes/:id', async (req, reply) => { const id = Number(req.params.id);if (id !== 42) { reply.statusCode = 404;return { error: 'not_found' };}return {producer_pid: process.pid,recipe: {id, name: "Chicken Tikka Masala", steps: "Throw it in a pot...", ingredients: [{ id: 1, name: "Chicken", quantity: "1 lb", },{ id: 2, name: "Sauce", quantity: "2 cups", }]}};});server.listen(PORT, HOST, () => {console.log(`Producer running at https://${HOST}:${PORT}`);});$ mkdir -p ./{recipe-api,shared}/tls$ openssl req -nodes -new -x509 \-keyout recipe-api/tls/basic-private-key.key \-out shared/tls/basic-certificate.certThis command creates two files, namely basic-private-key.key (the private key) and basic-certificate.cert (the public key).Next, copy the recipe-api/producer-http-basic.js service that you made in Example 1-6 to a new file named recipe-api/producer-https-basic.js to resemble Example 2-7. This is an HTTPS server built entirely with Node.js.Example 2-7. recipe-api/producer-https-basic.js#!/usr/bin/env node// npm install fastify@3.2// Warning: Not as efficient as using a Reverse Proxy const fs = require('fs');const server = require('fastify')({ https: { key: fs.readFileSync(  dirname+'/tls/basic-private-key.key'),cert: fs.readFileSync(  dirname+'/../shared/tls/basic-certificate.cert'),}});const HOST = process.env.HOST || '127.0.0.1'; const PORT = process.env.PORT || 4000;server.get('/recipes/:id', async (req, reply) => { const id = Number(req.params.id);if (id !== 42) { reply.statusCode = 404;return { error: 'not_found' };}return {producer_pid: process.pid,recipe: {id, name: "Chicken Tikka Masala", steps: "Throw it in a pot...", ingredients: [{ id: 1, name: "Chicken", quantity: "1 lb", },{ id: 2, name: "Sauce", quantity: "2 cups", }]}};});server.listen(PORT, HOST, () => {console.log(`Producer running at https://${HOST}:${PORT}`);});